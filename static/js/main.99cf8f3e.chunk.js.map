{"version":3,"sources":["logo.png","components/ExampleForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ExampleForm","_useState","useState","_useState2","Object","slicedToArray","state","setState","fields","id","props","label","type","value","name","comp","TextControl","about","TextareaControl","selected","rate","options","RadioControl","country","SelectControl","checked","terms","CheckboxControl","getFields","react_default","a","createElement","length","map","item","i","key","className","assign","onChange","objectValue","objectSpread","build_module","isPrimary","AppTabs","title","App","src","logo","alt","activeClass","tabs","tab","TabComponent","tabsItem","RenderTab","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99cf8f3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f91b5c1e.png\";","import React, { useState } from 'react';\nimport { Button, TextControl, TextareaControl, RadioControl, CheckboxControl, SelectControl } from '@wordpress/components';\n\nfunction getFields( state ) {\n    return [\n        {\n            id: 'name',\n            props: {\n                label: 'Name',\n                type: 'text',\n                value: state ? state.name || '' : ''\n            },\n            comp: TextControl\n        },\n        {\n            id: 'about',\n            props: {\n                label: 'About',\n                value: state ? state.about || '' : ''\n            },\n            comp: TextareaControl\n        },\n        {\n            id: 'rate',\n            props: {\n                label: 'Rate',\n                selected: state ? state.rate || '1' : '1',\n                options: [\n                    { label: '1', value: '1' },\n                    { label: '2', value: '2' },\n                    { label: '3', value: '3' },\n                    { label: '4', value: '4' },\n                    { label: '5', value: '5' },\n                ]\n                \n            },\n            comp: RadioControl\n        },\n        {\n            id: 'color',\n            props: {\n                label: 'Color',\n                selected: state ? state.country || 'green' : 'green',\n                options: [\n                    { label: 'Green', value: 'green' },\n                    { label: 'Blue', value: 'blue' },\n                    { label: 'Red', value: 'red' }\n                ]\n                \n            },\n            comp: SelectControl\n        },\n        {\n            id: 'terms',\n            props: {\n                label: 'Terms',\n                checked: state ? state.terms || false : false,\n                \n            },\n            comp: CheckboxControl\n        }\n    ];\n}\n\nfunction ExampleForm() {\n  const [ state, setState ] = useState({});\n  const fields = getFields( state );\n \n  return (<form>\n        { \n            fields.length && fields.map( ( item, i  ) => {\n   \n                return <div key={i} className=\"field\">\n                    <item.comp { ...item.props } onChange={ \n                        ( value ) => {\n                            let objectValue = {};\n                            objectValue[ item.id ] = value;\n                            setState({\n                                ...state,\n                                ...objectValue\n                            });\n                        }} />\n                </div>;\n            })\n        }\n        <Button isPrimary>Submit</Button>\n  </form>);\n}\n\nexport default ExampleForm;\n","import React from 'react';\nimport './App.scss';\nimport logo from './logo.png';\nimport { TabPanel, SlotFillProvider, Slot, Fill } from '@wordpress/components';\nimport ExampleForm from './components/ExampleForm';\n\nfunction RenderTab( tab ) {\n  const tabs = AppTabs();\n  let TabComponent = ExampleForm; // Default.\n  for( let i = 0; i < tabs.length; i++ ) {\n    let tabsItem = tabs[ i ];\n    if ( tab.name === tabsItem.name ) {\n      TabComponent = tabsItem.comp;\n      break;\n    }\n  }\n\n  return <Fill name=\"TabContentSlot\"><TabComponent /></Fill>\n}\n\nfunction AppTabs() {\n  return [\n    {\n      name: 'example1',\n      title: 'Example Form',\n      comp: ExampleForm\n    },\n    {\n      name: 'example2',\n      title: 'Example Notices',\n      comp: 'ExampleNotices'\n    },\n    {\n      name: 'example3',\n      title: 'Example Upload',\n      comp: 'ExampleUpload'\n    }\n  ]\n}\n\nfunction App() {\n  \n  return (\n      <SlotFillProvider>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img className=\"logo\" src={logo} alt=\"logo\" />\n            <h1>Gutenberg Components outside of the Editor</h1>\n            <h2>JavaScript for WordPress 2019</h2>\n            \n            <TabPanel className=\"my-tab-panel\"\n              activeClass=\"active-tab\" \n              tabs={ AppTabs() }>\n              { (tab) => RenderTab(tab) }\n            </TabPanel>\n          </header>\n          <main>\n            <Slot name=\"TabContentSlot\"/>\n          </main>\n        </div>\n      </SlotFillProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}